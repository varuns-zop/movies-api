name: Rewards Service CI-CD
on:
  push:
    branches: 
      - master
      - development
  pull_request:
    branches:
      - main
      - development
      - master
    
defaults:
  run:
    shell: bash
jobs:
   test:
    name: Test and Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache-dependency-path: go.sum

      - name: Get dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y libmcrypt-dev
          go get -v -t -d ./...

      - name: Test
        run: |
          mkdir -p build/test
          go test ./... -v -coverprofile build/test/coverage.out -coverpkg=./...
          cat build/test/coverage.out | grep -vE 'mock_interfaces|migrations|main' > build/test/coverage.txt
          go tool cover -func build/test/coverage.txt

      - name: Parse code-coverage value
        run: |
          codeCoverage=$(go tool cover -func=build/test/coverage.txt | grep total | awk '{print $3}')
          codeCoverage=${codeCoverage%?}
          echo "CODE_COVERAGE=$codeCoverage" >> $GITHUB_ENV
          echo "PREVIOUS_COVERAGE=$codeCoverage" >> $GITHUB_ENV

      - name: Update existing environment variable
        id: update_env_var
        run: |
          echo "Previous Coverage: ${{ env.PREVIOUS_COVERAGE }}"
          export UPDATED_COVERAGE="90"
          echo "::set-output name=updated_value::${UPDATED_COVERAGE}"
          
      - name: Use updated environment variable
        run: |
          diff=$(echo "${{ env.PREVIOUS_COVERAGE }} - ${{ steps.update_env_var.outputs.updated_value }}" | bc)
          echo "COVERAGE_DIFF=$diff" >> $GITHUB_ENV

      - name: Add comment to PR
        uses: actions/github-script@v6
        if: always()
        with:
          script: |
            const name = '${{ github.workflow   }}';
            const url = '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}';
            const success = '${{ job.status }}' === 'success';
            const body = 'Previous Coverage = ${{ env.PREVIOUS_COVERAGE }}%, Current Coverage = ${{ env.CODE_COVERAGE }}%, Change in code coverage = ${{ env.COVERAGE_DIFF }}%'

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            })
